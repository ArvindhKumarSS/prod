name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: degen-monk
  EC2_HOST: ${{ secrets.EC2_HOST }}
  MCP_PORT: 3002

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG -f backend/Dockerfile backend/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG

    - name: Build and push MCP image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:mcp-$IMAGE_TAG -f backend/mcp/Dockerfile backend/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:mcp-$IMAGE_TAG

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Pull new images
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:backend-${{ github.sha }}
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:mcp-${{ github.sha }}
          
          # Stop and remove existing containers
          docker stop backend mcp || true
          docker rm backend mcp || true
          
          # Create network if it doesn't exist
          docker network create degen-monk-network || true
          
          # Start backend container
          docker run -d \
            --name backend \
            --network degen-monk-network \
            --restart unless-stopped \
            -p 3001:3001 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:backend-${{ github.sha }}
          
          # Start MCP container
          docker run -d \
            --name mcp \
            --network degen-monk-network \
            --restart unless-stopped \
            -p ${{ env.MCP_PORT }}:${{ env.MCP_PORT }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e MCP_USERNAME=${{ secrets.MCP_USERNAME }} \
            -e MCP_PASSWORD=${{ secrets.MCP_PASSWORD }} \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:mcp-${{ github.sha }}
          
          # Clean up old images
          docker image prune -f