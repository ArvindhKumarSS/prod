name: Deploy to EC2
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, Tag, and Push Backend Image
      env:
        ECR_REGISTRY: 307946674359.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: prod-backend
        IMAGE_TAG: latest
      run: |
        cd backend
        docker build -t 307946674359.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push 307946674359.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Build, Tag, and Push Frontend Image
      env:
        ECR_REGISTRY: 307946674359.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: prod-frontend
        IMAGE_TAG: latest
      run: |
        cd frontend
        docker build -t 307946674359.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push 307946674359.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ec2-user
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ECR_REGISTRY: 307946674359.dkr.ecr.us-east-1.amazonaws.com
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key
        chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key $EC2_USER@$EC2_HOST << 'EOF'
          set -x  # Enable verbose logging
          echo "AWS CLI version:"
          aws --version
          echo "Checking AWS credentials:"
          aws sts get-caller-identity || echo "AWS credentials check failed"
          echo "Clearing Docker config:"
          rm -f ~/.docker/config.json
          echo "Logging into ECR:"
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 307946674359.dkr.ecr.us-east-1.amazonaws.com || echo "ECR login failed"
          echo "Docker config after login:"
          cat ~/.docker/config.json || echo "No Docker config file"
          echo "Docker info:"
          docker info --format '{{.RegistryConfig}}'
          echo "Pulling backend image:"
          docker pull 307946674359.dkr.ecr.us-east-1.amazonaws.com/prod-backend:latest || echo "Backend pull failed"
          echo "Pulling frontend image:"
          docker pull 307946674359.dkr.ecr.us-east-1.amazonaws.com/prod-frontend:latest || echo "Frontend pull failed"
          echo "Stopping and removing backend container:"
          docker stop backend || true
          docker rm backend || true
          echo "Running backend container:"
          docker run -d -p 3001:3001 --name backend \
            -e DB_USER=postgres \
            -e DB_HOST=myapp-db.ce560iaoo0s7.us-east-1.rds.amazonaws.com \
            -e DB_NAME=mydb \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_PORT=5432 \
            -e PORT=3001 \
            307946674359.dkr.ecr.us-east-1.amazonaws.com/prod-backend:latest || echo "Backend run failed"
          echo "Stopping and removing frontend container:"
          docker stop frontend || true
          docker rm frontend || true
          echo "Running frontend container:"
          docker run -d -p 80:80 --name frontend \
            307946674359.dkr.ecr.us-east-1.amazonaws.com/prod-frontend:latest || echo "Frontend run failed"
          echo "Listing running containers:"
          docker ps
        EOF
        rm private_key